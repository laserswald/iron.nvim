*iron.nvim* Interactive Repls Over Neovim

===============================================================================
CONTENTS                                                            *iron-help*

  Introduction............................|iron-introduction|
  Awesomeness.............................|iron-awesomeness|
  Languages...............................|iron-languages|
  Commands................................|iron-commands|
  Functions...............................|iron-functions|
  Customizing.............................|iron-customizing|
  Mappings................................|iron-mappings|
  Credits.................................|iron-credits|

===============================================================================
Introduction                                                *iron-introduction*

Iron is a helper plugin that allows you to manage and interact with live
Read-Eval-Print-Loops (REPLs) directly from Neovim, through terminal buffers.
Iron mostly interacts with plugins via stdin/stdout, with few exceptions.

===============================================================================
Awesomeness                                                  *iron-awesomeness*

Iron makes it very easy to focus on the code while interacting with the REPL.
It allows you to, seamlessly, send chunks of code directly into the REPL,
without disrupting your coding workflow.

A lot more can be accomplished through Iron. In order to add new functionality
(such as running tests, evaluating expressions, adding new keybindings, etc),
all it takes is to extend the REPL providers.

===============================================================================
Languages                                                      *iron-languages*

Currently, Iron has support for the following programming languages:

  - clojure
    - lein
  - elixir
  - erlang
  - lua
  - ocaml
  - python
    - python
    - ipython
    - ptpython
    - ptipython
  - r
  - ruby
  - scala
    - scala
    - sbt

===============================================================================
Commands                                                        *iron-commands*

Iron provides the following commands for interacting with REPLs:

IronPromptCommand
  Prompts the user for which REPL to open for the current file type (ft) or
  prompts for ft if not found.

IronPromptRepl
  Prompts the user for the file type to open the REPL accordingly.

IronRepl
  Open a REPL for current file type.

IronDumpReplDefinition
  Dumps REPL definitions to the log.

IronClearReplDefinition
  Clears current file type's REPL definition.

===============================================================================
Functions                                                      *iron-functions*

Iron provides the following functions for interacting with REPLs:

IronSendSpecial
  Used by languages providers to send chunks of text to the REPL, such as
  imports based on current word.

IronSendMotion
  Sends an object of text to REPL.

IronSend
  Straightforward send to REPL.

===============================================================================
Customizing                                                  *iron-customizing*

To change iron's behavior, change the following variables:

g:iron_REPL_open_cmd
  Allows REPL to be positioned differently.

g:iron_new_REPL_hooks
  List of functions to be executed after any REPL is opened.

g:iron_new_`ft`_REPL_hooks
  Provide specific functions to be executed after a REPL of given ft is opened.

===============================================================================
Mappings                                                        *iron-mappings*

~all languages~
ctr
  send a chunk of text to REPL. Works with motions.

~clojure~
<leader>so
  Require namespace inside a list under cursor.
  i.e. [clojure.string :as string] sends (require '[clojure.string :as string])

<leader>si
  Import namespace inside a list under cursor.
  i.e. [java.time LocalDate] sends (import '[java.time LocalDate])

<leader>sn
  Set REPL namespace to current file.

<leader>sr
  Require current file into the REPL.

<leader>sR
  Require current file into the REPL, prompting for an alias.

<leader>s.
  Prompt namespace and require it into the REPL.

<leader>s/
  Prompt namespace and alias, requiring it into the REPL.

<leader>ss
  Send outermost parens group into the REPL.

<leader>ep
  Evaluate a command into the REPL, echoing the result. [experimental]

<leader>ee
  Evaluate a command into the REPL, passing the data under the cursor and
  updating it. [experimental]

~scala~
<leader>sa
  Import all for namespace below.

<leader>si
  Import namespace below.

<leader>sb
  Send current braces block to REPL linewise.

<leader>sl
  Send current line to REPL.


===============================================================================
Credits                                                          *iron-credits*

Plugin created by Henry Kupty <hkupty@gmail.com>.
It is free to use and extend. Please consider opening a pull request if
extended.

Source at https://github.com/hkupty/iron.nvim
